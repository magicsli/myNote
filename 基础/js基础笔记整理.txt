
	JS 数据类型
		1，number 数字
			- 不要让浮点数进行计算
		2，string 字符串
		3，object 对象（核心点）
		4, undefined 申明为定义
		5, boolean 布尔值
		6, null	     也是对象Object的数据类型 （遗留问题）
	prompt  --提示输入
	alert   --提示框 
	console.log -控制台打印
	document.write - 页面打印
	
	isNaN --是不是非数字
	！！  --转化为布尔值
	tostring - 转化为字符串
	
	\n  换行  	 \\注释

	\'  单引号	 \\t tab 

	\"  双引号	 \\b 空格
	
        length 长度
	字符串用 + 相连 其他运算符会隐式转换
	typeof（）  将数据的类型用字符串格式打印出来
	undefined  申明未赋值
		- 加任何数都是 NaN 

	tostring（） 转化为字符串型
			--底层的 Object 对象原型的方法
			-- a.toString(); 

	s0   tring（） 转化为字符串
		     -- 强制转换，少用，是window主对象的方法

	+  利用 + 号进行字符串相连 
		   -  "" + 123   结果 "123"（字符串123）
	
	parseInt 转化为整型 （直接去掉小数点，与 Math.floor 相近）
	
	= 赋值       == 判断相等    ===判断全等

	&& 与        ||  或   	       ！ 非  -（ ！！是得到布尔值运算 ）
	 
	switch（）{
			case    判断全等	 --判断true继续向下执行
		}
---------------------------------------------------
	do{
		}while()先运行一次循环语句，再判断
	
	coutiue  跳出本次循环
	break     跳出整个循环
	

	形参 - 函数需要接收的参数
	实参 - 调用者传过来的实际参数
			
	arguments  将传过来的参数以数组的方法存储，是一个伪数组
			----- 只读，不能进行赋值删减
	return  终止函数 并返回

		--- var b =  a（）   函数的返回值 ， return 后面的值 ；
			--未返回数据就是underfine

		--  var b = a        调用函数,将整个函数赋值给 b 
	
	我们更多的采用变量来存储函数
		-- 变量名 = 整个函数
------------------------------------------------------
	作用域
		简而言之，函数内部的可以访问外部，函数外部的不能访问内部
		
	（ 闭包：  将函数的值返回出来，即不收全局变量影响，不会影响出需要外任何
	变量 ；但是通过此方式保存的值是有极大缺陷，不易查找删除。滥用危害极大）

	预解析 ： 将 var 声明 和函数声明 放在程序最上边 ；函数优先级最高
			--var a = 0 ；只会把 var a 放在上面；注意这点
		   赋值运算依然在原位置；
		
---------------------------------------------------------
	对象   Object    （JavaScript的核心）

		      原理 - 装了一大堆乱七八糟 ‘属性’ 的盒子
	如 var a = {

		name: ‘帅哥’,

		age:  ‘18’
	}

--------------------------------------------------------------------

 	中间不是赋值！！！切记  属性和属性值中间使用的是 ： 号，
    
	属性间分隔是用 ， 号隔开  这点切记切记！！！！！！！

---------------------------------------------------------------------
	创建对象的方法：
			1，  var a = {  } 

			2,   var a = new object（）；
				---这点涉及后面的构造函数
				--- 一般用于创建带属性值得模板对象

	对象万物皆可存，任何数据都可以存在对象中；
		数组，字符串 也是一种特殊的对象；

	对象原型 _proto_    （了解-与后面的高级操作有重要联系）
	
	遍历对象   for( k in a ){

			k 指 对象的各个方法

			a [k] 调用此方法 （每个方法调用一遍）

		(遍历对象也可以遍历 Json ) 遍历顺序是属性名的阿斯格码排列
		}
	调用对象：
		1，  a.name
		2,   a["name"]

	使用对象方法中的函数   a.name();
	注意指针 this 谁调用就指向谁
----------------------------------------------------	
	构造函数    -- 与对象关系紧密
		function NewObject(name,age){
			this.name = name;
			this.age = age ;
		}
	首字母大写 !!!
    
	使用方法：  var a = new NewObject('wang',18);

----------------------------------------------------------
	系统含有一些内置对象   - 重要 - 
		建议查询 mdn 
	
	Math   数学对象 （首字母必须大写！！）  window的对象
		
		Math.max   最大值
		Math.min   最小值
		Math.floor 向下取整 （ 效果和parseInt一样）
		Math.ceil  向上取整  

	Math.round()  四舍五入  （是五就取大值，所以在进行负数取整留意）
	
	Math.random() 取随机数（  0 -  1  ）
		使用 function getRandom( min , max ){

			return  Math.floor(Math.random()*(max-min+1)+min );

		}	

	Math.abs()  取绝对值
	
	
	Date  日期对象 （构造函数）

		获得当前时间：  --获得的是毫秒数
		
			valueof（）
			gettime（）
		     + new Date（）
	   H5 新方法 Date.now（）； 
	
	获得其他的方法：
	
		getfullyeat  获得年
	     getmonth + 1    获得月   -- JS中从0 开始计数，所以需要加1 
		getDate      获得日期
	 	getday       获得星期几	

	  获得当前的年月日函数：

	 function gettime() {
             var time = new Date();
             var h = time.getHours();
             var m = time.getMinutes();
             var s = time.getSeconds();
             h = h < 10 ? '0' + h : h;
             m = m < 10 ? '0' + m : m;
             s = s < 10 ? '0' + s : s;
             var days = time.getDay();
             var day = ['星期日', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六', ]
             return '现在是' + h + '时' + m + '分' + s + '秒';
         }
	
    	
	Array 数组

		var a = new Array(数组长度);
		   --判断对象是否属于数组  instanceof 
		IsArray  判断是够是数组
	注：
		push   在后面增加一位元素
			- a.push(123);
			- 返回数组长度

		pop	在数组最后删除一个元素
			-  a.pop(这里没有参数！) 
			- 返回被删除的那个数

	        unshift  在数组最前面增加一位元素
			-  用法与push 一致

		shirt    在数组最前面删除一位元素
			- 用法和pop 一致
	
	arr.reverse( 无参数 )；  翻转数组   --返回新数组
	
	arr.sort（）    冒泡排序

				- 降序 / 升序

	   	升序公式：
		arr.sort( funciton(a,b){
			return a -b ;				
		})

		降序公式：
		arr.sort( funciton(a,b){
			return b - a ;				
		})
		