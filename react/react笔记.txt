	1, react 是一个渐进式的mvc核心js库,配合react的生态变成一个mv*的框架
	2, 特点:  声明式编码,  组件化编码,   高效的DOM diff 算法-最小化
	3, 页面重绘:   单向数据流,  虚拟DOM,  组件化,   jsx语法糖
	4, react 使用的是babel模块,内置JSX语法糖!!!!
	5, 引入JS文件 :
			-- react             ump文件夹下的react.development.js (开发版)
			-- react-dom         ump文件夹下的react-dom.development.js (开发版)
			-- @babel/standalone     babel.js
	6, 在 <script type="text/babel"> </script>中书写代码
	下载todomvc : 
	git clone https://github.com/tastejs/todomvc-app-template.git --depth=1 todomvc-react
	

	内联判断 即 
	{ 条件语句  && <h1> { 新的判断 } </h1> }

	注: 我们在 输入节点时 也可以和js 混装
	
	--   如果 type = "text/babel"  且是 src 引用的外部资源  并且使用src引用的外链资源,则必须使用 HTTP 服务进行访问

	

	7, 由于react会持续监测组件状态的变化,并且进行重新渲染! 
		-例如: 如果复杂的类组件 中设置的计时器 代码如:
			class render extends React.Component{
				constructor(arg){
				    super(arg);
				    this.state= {x : 1}
				}				
				render(){
				 setinterval(()=>{this.setState({x:++this.state.x})},2000)	
				 return <h2> {this.state.x } </h2>
				}
			}
		       ReactDOM.render(<render/>, document.queryselector(".app"));
		在如上的代码中,因为类组件的状态在变化,所以render组件也在重复调用
	8, 组件化是react的核心点! react使用的是jsx语法糖, 内容以es6为主, 由于babel的解码器原因
	所以我们不用担心es6的兼容性问题:  一个标准的react程序员必须要学习 react-native

	9,  state  就是组件的状态,当state改变时,DOM就会重新渲染, -- (只有类组件才有状态)
	    组件状态的设置需要分析,是公有还是私有,如果是私有的则直接给父组件, 如果大家都需要,则直接设置在自己的状态里
	   子组件不能直接改变父组件的状态
	    ---设置状态的函数 setState({ });
	注意: !!!! 
		我们不能直接修改state, 这样不会触发重新渲染,必须使用setState进行状态改变,
		我们在组件未被渲染时,无法直接修改组件状态如,在render之前使用setState会直接报错

	
	10, props 就是组件接收的数据,
		-- 组件标签的所有属性都保存在props中
	 this.props.数据名称
		--预备代码:
		function Person(props){
			return <ul>
				   <li>{props.name}</li>
				   <li>{props.age}</li>
				   <li>{props.sex}</li>
			       </ul>
		}
		const data = {
			name:"tom",
			age : 18,
			sex: "男"
		}
		
	ReactDOM.render(<Person name={data.name}age ={data.age} sex={data.sex} />, document.queryselector(".app"));

	   	即因为组件是需要重复调用的,并且每次调用需要显示的值各有不同,所以这里我们就需要一种新的办法进行传参(注意: 数据要进行验证类型,需要设置默认值)
	  设置组件的默认值:
		Person.defaultProps = {
			
	}
	  如果需要设置组件的值,必须要传值
	 对props中的属性值进行类型限制和必要性限制:
	    Person.protoTypes = {  ***  }
----------------------------------------------------
		警告:  在reactV15版本中,protoTypes已经被禁用,而使用proto-types库进行代替!!!!
----------------------------------------------------
	 如需使用此方法,就需要下载proto-types库,并引入, 
	  指定属性默认值与必要性: 
			 --(isRequired 必须的)

		Person.protoTypes={
		  name:ProtoTypes.string.isRequired,
		  age:ProtoTypes.number
		} 

	   要快速设置props可以使用拓展运算符
		<Person {...data}/>就相当于<Person name = {data.name} age = {data.name} sex = {data.sex}/>

	类组件  class Person extends React.Component{
	
	render(){
		return (
	<ul>
		<li>姓名: { Props.name }</li>
		<li>姓名: { Props.age }</li>
		<li>姓名: { Props.sex }</li>
	</ul		
		)
	}	
  }
	用法与函数组件相似
	11, 注意点:
		1, 在render书写组件的时候,单标签必须要有结尾即:  <img src = "***"  /> 硬性要求,绝对不可以遗漏
		2, 再JSX语法中由于JS关键字的原因,我们的一些属性名需要特地修正例如: class => className 等等
		3, 在我们React中,我们给虚拟DOM注册事件时,也需要以小驼峰式命名 即: <a onClick = {***}></a>
		4,在组件DOM中要写js语句必须要加 {}
		5, 只能也必须有一个根标签
	
	12, ref 组件的标识! 相当于DOM节点的ID属性, 
	我们通过  this.refs.(组件的ref标识)获取这个dom节点  -- 官方不推荐
	在dom节点中设置 ref = { input => this.input = input} 通过回调函数将这个节点绑定带组件对象的一个属性上面,继而通过 this.input 即可访问此节点
	
	13, 组件的嵌套 示例代码;
	class App extends React.Component{

	render(){
		return (
			  <div>
				<List />
				<Add  />
			  </div>)
		}
	}
	class List extends React Component{

	render(){
		return (
		  <ul>
			<li></li>
			<li></li>
			<li></li>
		  </ul>
		)
	    }
	}
	class Add extends React Component{
		render(){
			return (
		   <a href="www.baidu.com"></a>
		)
	    }
	}
	
	我们要实现组件的嵌套,就将子组件渲染到父组件的dom节点中

	14, 子组件中不能直接改变父组件的状态, 状态在哪个组件,更新状态的行为就应该定义在那个组件
	15,要更新组件状态,必须要使用setState函数,不能直接修改state状态对象
	   父组件定义函数,传递给子组件,子组件调用
14, 获得表单数据,
	16, 
	受控组件:
	<input type="text" value = {this.state.user} onChange ={this.handleChange}/>
  		
	不受控组件:
	<input type = "text" ref = { input => this.input = input } / >

	注: 如果在input 中设置value 那么必须和onChange 配合组成受控组件,否则会报错 
	   -- value 涉及到受控表单配置:
	 value= {this.state.inputData}
		我们在修改input元素中的属性时,也会同步修改状态中的数据
 
	17, 生命周期: 
		初始化 -> componentWillmount 等待挂载 -> 渲染 -> 完成挂载

		setState改变状态 -> componentwillupdata -> render -> componentDidmount 
	

	

	18: 简化语法:  --模块化
	
	import React, { Component} from 'react'
		-- 这是组件模块的配置引入, 主文件不用引入模块

	import ReactDOM from 'react-dom'
			-- 引入reac-dom模块 ( 组件模块不需要引用 )
			-- ReactDOM.render() 为了使用此功能

	import PropTypes from "prop-types"
			-- 引入Proptype 功能库

	import "./commentList.css "
			-- 引入css文件

	import  logo from "../logo.svg"
			-- 引入logo文件	

	import App from "./component/app"
			-- 这是引入主文件

	export default class ComponentAdd extends Component{
		
			state={
		    		 x:123,
		  		 y:456
			}
			
			handleAdd = () => {
		    // 这样写不用改变指针,因为箭头函数从外部环境获取this值,这时候就是获取组件对象为this
		}
	

	}
 
  	19,react.ajax:

	测试接口:  https://api.github.com/search/repositories?q=r&sort=stars
		
		react本身只关注界面,并不包含发送ajax的代码
		前端应用需要通过ajax请求与后台进行交互(json 数据)
		axios: 轻量级的代码ajax库

	a, 封装XMLHttpRequest 对象的ajax
	b, promise 风格
	c, 可以在浏览器和服务器端运行
	
		fetch 原生函数: 
			- 老版本不支持
	a, 不再使用XMLHttpRequest 对象请求
	b, 为了兼容低版本的浏览器,可以引入兼容库 fetch.js


 	axios演示:
			-- get请求
	axios.get(url)

		.then( resolveResult => {
		console.log(resolveResult.data) })

		.catch(rejectResult => {  
		console.log(rejectResult.data ) } )


			-- post请求
	axios.post( url, {键:值,*** } ).then(***,***)
	
	
	fetch 函数演示:
	
	fetch(url).then(resolveResult => {
		return resolveResult.json() })
	  .then( data => { *** } )


	20, 当组件接收到新的属性时回调:
		componentWillReceiveProps(newProps){
	
		
	}

	21: 组件之间进行通信:  --解决兄弟和多层之间的通信问题
   --- props通信:

		1, 共同的数据放在父组件上,特有的数据放在自己组件内部(state)
		2, 通过props可以传递一般数据和函数数据,只能一层一层传递;
		3, 一般数据 --> 父组件传递数据给子组件 --> 子组件读取数据
		4, 函数数据 --> 子组件传递数据给父组件 --> 子组件调用函数
		

   --- 使用消息订阅(subscribe)-发布(publicsh)机制
	
	- pubsubjs 库 -  

	PubSub.subscribe("事件名", 事件回调函数 ) 订阅消息:

	Pubsub.subscribe("search", function( msg, data){
		//msg: 消息名   data: 数据
		//	!!! 必须使用箭头函数  
	})

	Pubsub.publish("事件名", "要发布的数据" )  发布消息


	22, react-route 4:
	1.1, react-router的理解:

		1) react的一个插件库

		2) 专门用来实现一个SPA应用

		3) 基于react的项目基本都会用到此库

	1.2, SPA的理解:    -- 单页链接: 路由链接  

	1) 单页Web应用( single page web application, SPA )

	2) 整个应用只有一个完整的页面

	3) 点击页面中的链接不会刷新页面, 本身也不会向服务器发请求

	4) 当点击链接时, 只会做页面的局部更新

	5) 数据都需要通过AJAX请求获取, 并在前端异步展现


     	1.3   路由理解:  映射关系      (请求)(响应)
		router 注册路由: 	  |    |
		  router(path, function( rep, res){ } )
			  |	|
			路径	函数

     1) 什么是路由:
 	一个路由就是一个映射关系(key, value)
	key为路由路径, value可能是functuin/component
	
     2) 路由分类: 
	后台路由:  node服务器路由, value是function, 用来处理客户端提交的请求并返回一个响应数据
	前台路由:  浏览器端路由,value是component, 当请求时路由path是,浏览器端前没有发送Http请求, 但界面会更新显示对应的组件
     3) 后台路由
	注册路由: router.get(path, function(req, res))
	当node接收到一个请求时,根据请求路径找到匹配的路由,调用路由中的函数来处理请求,返回响应数据
     4) 前端路由
	history库
	

	react-router相关api
	
	- 1 -
		<BrowerRouter>
		<HashRouter>
		<Router>
		<Redirect>
		<Link>
		<NavLink>
		<Switch>	
	
	- 2 -
		history 对象
		match 对象
		withrouter 对象

	
		

	<Route path="/home/news"  component={ } />

	嵌套路由:
		1,编写路由组件
		2, 在父路由组件中指定
	路由链接: <NavLink>
	路由: <Router>
	要用 <BrowerRouter>
		form= 发布路由    to:接收路由

	<Redirect   to="/home/news" />	 	

	如何编写路由效果, 
		1, 编写路由组件,
		2, 在父路由组件中指定
			路由链接: <NavLink>
			路由: <Route>

	向路由组件传递数据:
		使用站位符,可以获得此参数
	/ home/ about / :id
			 |
			 |
			: 就是一个占位符,代表这里放什么都可,先占一个位置  --  通过 props.match.prams 可以获取

	结:    通过 link  或者   NavLink   发送路由

		通过 route 接收
		Switch  进行筛选
		
----------------------------最核心的难点------------------
	redux :
		redux 是一个独立专门用于做状态管理的js库(不是react插件库)
		它可以用在 react, angular, vue 等项目中, 但基本与react配合使用
		作用: 管理react应用中多个组件共享的状态

	redux 的使用场景:
		1) 总体原则: 能不用就不用,如果不用比较吃力才考虑使用
		2) 某个组件的状态, 需要共享
		3) 某个状态需要在任何地方都可以拿到
		4) 一个组件需要改变全局状态
		5) 一个组件需要改变另一个组件状态
	
	核心API :
		createStore()  
			创建包含指定reducer的store对象
	
		store 对象 ,redux 最核心的管理对象
			--内部维护着 state reducer

			--核心方法:
			  getState()     - 获取状态
			  dispatch(action) -分发
			  subscribe(Listener)  -订阅

			--编码:
			 store.getState()
			 store.dispatch({ type: "INCREMENT", number })
			 store.subscribe(render)


		applyMiddleWare()
			应用上基于redux的中间件(插件库)
			
  	
		1) provider 
		   让所有组件都可以得到state数据
			<Provider store={store}>
			 	<App />
			</Provider>


		2) 2connect()
		   用于包装ui组件生产容器组件

		import { connect } from "react-redux"
 		  connect(

			mapStateToprops
			mapDispatchToProps

			)(Counter)


		3) mapStateToprops()

			将外部的数据(即state对象) 转化为UI组件的标签属性
		const mapStateToprops = function (state){
			
			return{
			   value: state
			}
		}	
		


		react-redux 插件库
		
			一个react插件库,专门用来简化react中的redux编写
		将所有的组件分为两大类,

	1, ul组件:

		只负责UI的呈现, 不带有任何业务逻辑,
		通过props接受数据(一般数据和函数)
		不使用任何Redux的API
		一般保存在components文件夹下

	2, 容器: 
		
		负责管理数据和业务逻辑,不负责UI的呈现,
		使用redux的api
		一般保存在containers文件夹下

	redux 默认不支持异步操作

	通过redux异步插件(异步中间件)
			
  	combineReducers ( { 函数名, 函数名} )  整合函数,将处理函数整合成一个来管理

	





	慕课网实战笔记:

		jq就所有mvc框架, 就是控制层
		react, Facebook开源的一个JavaScript库
		react结合生态库构成mv*框架
		react特点
			声明式编码
			组件化编码
			高效的dom diff 算法, 最小化页面重绘
			单向数据流 :
		    不能子集向父集传数据,必须使用一些特殊处理方法
	
	
	MV*  - 只关注视图view层 + 数 据层model

	生态:

	Vue 生态:  Vue + vue-Router + Vuex +  Axios + Babel + webpack
	
	React生态: React + React-Router + Redux + Axios + Babel + webpack
	

	编程式实现:
		需要一具体代码表达在哪里, 做什么, 如何实现

	声明式编码:
		只需要申明在哪里, 做什么, 不用关心怎么实现

	

	yarn :
		facebook出的一款新一代包管理工具

		速度快, 
		安装版本统一, 更安全
		更简洁的输出
		更好的语义化

	yarn init 初始化
	yarn add 增加包
	yarn remove 删除包
	yarn / yarn install 


	react生命周期:
		getDefaultProps - 初始化props属性
		getInitialState - 初始化当前组件的状态
		componentWillMount -  加载之前调用
		render   -    渲染 
		componentDidMount - 组件已经加载完成调用
		componentWillReceiveProps 父组件属性传递
		shouldComponentUpdate -  更新状态setState
		componentWillUpdate  - 等待更新
		componentDidUpdate  -  完成更新
		componentWillUnmount - 等待删除

		