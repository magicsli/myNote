
	/* 此规范仅为magicsli本人的风格规范, 不能作为行业规范 */


- 1, 减少setData的使用, 将多个setData函数进行统合. 减少页面重绘. 


- 2, 分离模板数据, 逻辑数据; 	( 由上, 多余的data中的数据会影响页面渲染性能, 而且数据过多容易混杂 ) 
	
	 -- 例:
	
		Page({
	
	- 将要渲染在模板中的数据	
			data: {
	 			pageData: {},
				userData: {}
	
			}
	
	- 只在js中使用的状态数据
			state: {
				page: 1,
				limit: 12,
				hasMore: false
			}			
		
		})


- 3, 组件化, ( - 建立在风格内容不发生大的改变的情况下, 尽量细碎化组件, 或者适用其他小程序组件 - )


	
- 4, 使用公共函数, 模板分包, 图片cdn

	

- 5, 版本更新时, 进行代码管理. -> 去除老代码 ... 这点很难做到,毕竟作为开发, 我们经常听见产品说: "这不是上个月的需求吗, 你再加回去".



- 6, 使用flex, 等自适应函数, 切勿使用 width: 33%; 或者`wdth: clac(100% - var(--padding))` ... 另外, c3函数 兼容性较差. 而且对性能消耗过大. 非特殊情况不适用



- 7, 由于小程序图片不能用样式自适应. 不能使用 `height: 100%; width: auto;` 这类H5的自适应做法. 我们需要定好比例数据. 或者为image添加一个属性, 不要手动定宽高
	
	例: ` <image  mode="widthFix" /> ` 

- 8, 不要瞎塞图片! 不要瞎塞图片, 不要瞎塞图片!  重要的事情说三次; 由于小程序有包大小机制. 主包不能超过2m, 加上我们的组件库, 首页, 如果再塞点图片, 分分钟超包


- 9, 我们可以使用本地存储作为公共状态管理, 进行静态数据缓存, 减少数据的空白期. 但是, 由于本地存储严重的问题.读取速率较差, 一次性, 永久保存. 如果大量使用, 容易造成数据冲突, 一旦发生冲突, 问题不好定位

	-- 隐藏问题:

		1, 如果版本内容发生了更新, 新旧数据缓存容易发生问题, 

		2, 更新效率差, 需要手动进行`wx.getStoragesync('key')` 来获取, 无法实时更新

		3, 缓存内容有上限. 

		附: - 4, 建议将静态数据与状态数据分离.


	总结: 由于目前小程序对公共状态这块并不完善. 我们可以使用app方法中建立一个公共Store模仿vuex进行公共状态订阅反馈; 使用缓存在进行大批量零碎的数据处理时, 具有很强的局限性. 我们尽量将状态数据进行内存管理, 将图片/静态资源数据进行缓存管理. 这点并不是很好实现, 对于实时更新性数据不需要重复的更新缓存, 建议使用内存状态


- 10, 不要去获取用户过多的授权信息, 将所有的信息部件化, 只在需要时使用, 保护用户隐私 / 主要是遵守小程序开发规范. 


- 11, 格局设局, 小程序在设计之初, 就需要定好大局, 如何分包, 样式标准, 行为准则. 这些东西都需要规范好格局, 否则在多人开发时, 很容易出现甲的逻辑和乙的逻辑冲突, 导致效率低下且代码难以维护. 
 

- 12, 接口区分化, 将接口模块化, 不要将页面数据统合在一个接口中, 否则一旦进行接口调整, 很容易造成数据错误, 而且接口错乱. 


- 13, 标准化. 一切都需要指定一个标准, 我们现在由于缺乏一个稳定有保证的标准而导致代码维护程度低下, 这一点在多人开发中很重要, 一个好的领导决定一个优秀的标准. 这点在团队中非常重要



- 14, 图片规范 --- 命名规范, 以分包库+组件特征作为图片名, 拒绝不同图片的命名重复, 也不允许同一图片多次出现在包库中, 上传至cdn时必须做好日志备份


